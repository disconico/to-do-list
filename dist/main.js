(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>j});var r=t(537),i=t.n(r),o=t(645),a=t.n(o),s=t(667),c=t.n(s),d=new URL(t(369),t.b),A=new URL(t(91),t.b),l=new URL(t(4),t.b),u=new URL(t(168),t.b),p=new URL(t(111),t.b),m=new URL(t(142),t.b),h=new URL(t(821),t.b),f=new URL(t(370),t.b),g=new URL(t(658),t.b),E=new URL(t(573),t.b),b=a()(i()),C=c()(d),v=c()(A),y=c()(l),w=c()(u),B=c()(p),x=c()(m),k=c()(h),M=c()(f),T=c()(g),S=c()(E);b.push([n.id,'/* #region normalize.css */\n/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15;\n  /* 1 */\n  -webkit-text-size-adjust: 100%;\n  /* 2 */\n}\n\n/* Sections\n       ========================================================================== */\n\n/**\n     * Remove the margin in all browsers.\n     */\n\nbody {\n  margin: 0;\n}\n\n/**\n     * Render the `main` element consistently in IE.\n     */\n\nmain {\n  display: block;\n}\n\n/**\n     * Correct the font size and margin on `h1` elements within `section` and\n     * `article` contexts in Chrome, Firefox, and Safari.\n     */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n       ========================================================================== */\n\n/**\n     * 1. Add the correct box sizing in Firefox.\n     * 2. Show the overflow in Edge and IE.\n     */\n\nhr {\n  box-sizing: content-box;\n  /* 1 */\n  height: 0;\n  /* 1 */\n  overflow: visible;\n  /* 2 */\n}\n\n/**\n     * 1. Correct the inheritance and scaling of font size in all browsers.\n     * 2. Correct the odd `em` font sizing in all browsers.\n     */\n\npre {\n  font-family: monospace, monospace;\n  /* 1 */\n  font-size: 1em;\n  /* 2 */\n}\n\n/* Text-level semantics\n       ========================================================================== */\n\n/**\n     * Remove the gray background on active links in IE 10.\n     */\n\na {\n  background-color: transparent;\n}\n\n/**\n     * 1. Remove the bottom border in Chrome 57-\n     * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n     */\n\nabbr[title] {\n  border-bottom: none;\n  /* 1 */\n  text-decoration: underline;\n  /* 2 */\n  text-decoration: underline dotted;\n  /* 2 */\n}\n\n/**\n     * Add the correct font weight in Chrome, Edge, and Safari.\n     */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n     * 1. Correct the inheritance and scaling of font size in all browsers.\n     * 2. Correct the odd `em` font sizing in all browsers.\n     */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace;\n  /* 1 */\n  font-size: 1em;\n  /* 2 */\n}\n\n/**\n     * Add the correct font size in all browsers.\n     */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n     * Prevent `sub` and `sup` elements from affecting the line height in\n     * all browsers.\n     */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n       ========================================================================== */\n\n/**\n     * Remove the border on images inside links in IE 10.\n     */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n       ========================================================================== */\n\n/**\n     * 1. Change the font styles in all browsers.\n     * 2. Remove the margin in Firefox and Safari.\n     */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit;\n  /* 1 */\n  font-size: 100%;\n  /* 1 */\n  line-height: 1.15;\n  /* 1 */\n  margin: 0;\n  /* 2 */\n}\n\n/**\n     * Show the overflow in IE.\n     * 1. Show the overflow in Edge.\n     */\n\nbutton,\ninput {\n  /* 1 */\n  overflow: visible;\n}\n\n/**\n     * Remove the inheritance of text transform in Edge, Firefox, and IE.\n     * 1. Remove the inheritance of text transform in Firefox.\n     */\n\nbutton,\nselect {\n  /* 1 */\n  text-transform: none;\n}\n\n/**\n     * Correct the inability to style clickable types in iOS and Safari.\n     */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n     * Remove the inner border and padding in Firefox.\n     */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n     * Restore the focus styles unset by the previous rule.\n     */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n     * Correct the padding in Firefox.\n     */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n     * 1. Correct the text wrapping in Edge and IE.\n     * 2. Correct the color inheritance from `fieldset` elements in IE.\n     * 3. Remove the padding so developers are not caught out when they zero out\n     *    `fieldset` elements in all browsers.\n     */\n\nlegend {\n  box-sizing: border-box;\n  /* 1 */\n  color: inherit;\n  /* 2 */\n  display: table;\n  /* 1 */\n  max-width: 100%;\n  /* 1 */\n  padding: 0;\n  /* 3 */\n  white-space: normal;\n  /* 1 */\n}\n\n/**\n     * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n     */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n     * Remove the default vertical scrollbar in IE 10+.\n     */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n     * 1. Add the correct box sizing in IE 10.\n     * 2. Remove the padding in IE 10.\n     */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box;\n  /* 1 */\n  padding: 0;\n  /* 2 */\n}\n\n/**\n     * Correct the cursor style of increment and decrement buttons in Chrome.\n     */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n     * 1. Correct the odd appearance in Chrome and Safari.\n     * 2. Correct the outline style in Safari.\n     */\n\n[type="search"] {\n  -webkit-appearance: textfield;\n  /* 1 */\n  outline-offset: -2px;\n  /* 2 */\n}\n\n/**\n     * Remove the inner padding in Chrome and Safari on macOS.\n     */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n     * 1. Correct the inability to style clickable types in iOS and Safari.\n     * 2. Change font properties to `inherit` in Safari.\n     */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  /* 1 */\n  font: inherit;\n  /* 2 */\n}\n\n/* Interactive\n       ========================================================================== */\n\n/*\n     * Add the correct display in Edge, IE 10+, and Firefox.\n     */\n\ndetails {\n  display: block;\n}\n\n/*\n     * Add the correct display in all browsers.\n     */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n       ========================================================================== */\n\n/**\n     * Add the correct display in IE 10+.\n     */\n\ntemplate {\n  display: none;\n}\n\n/**\n     * Add the correct display in IE 10.\n     */\n\n[hidden] {\n  display: none;\n}\n\n\n/* #endregion */\n:root {\n  --background-grey-color: #F8F7FA;\n  --background-blue-color: #6081B3;\n  --hover-blue-color: #203d6a;\n  --font-color: rgb(32, 32, 32);\n  --low-color: #A0D468;\n  --medium-color: #FFCE54;\n  --high-color: #f15050;\n  --background--sticker: rgb(249, 249, 181);\n}\n\n@font-face {\n  font-family: \'SF-regular\';\n  src: url('+C+");\n\n  font-family: 'SF-bold';\n  src: url("+v+");\n\n  font-family: 'pacifico';\n  src: url("+y+");\n}\n\n@keyframes rainbow {\n  0% {\n    background-position: 0% 50%\n  }\n\n  50% {\n    background-position: 100% 25%\n  }\n\n  100% {\n    background-position: 0% 50%\n  }\n}\n\nhtml,\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: 'SF-regular', sans-serif;\n  color: var(--font-color);\n}\n\nbody {\n  min-height: 100vh;\n  box-sizing: border-box;\n}\n\nbutton {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n#content {\n  min-height: 100vh;\n  min-width: 100vw;\n  display: grid;\n  grid-template-rows: 1fr min-content;\n}\n\n.main {\n  display: grid;\n  grid-template-columns: 200px 1fr;\n}\n\n.sideBar {\n  background-color: var(--background-grey-color);\n  display: grid;\n  grid-template-rows: 70px max-content max-content 1fr;\n  gap: 1rem;\n  padding: 0.5rem;\n  border-right: 0.5px solid rgb(238, 236, 236);\n\n}\n\n.main--title--p {\n  height: 100%;\n  font-family: 'pacifico', sans-serif;\n  /* background-image: repeating-linear-gradient(to left,yellow, orange, red, yellow); */\n  /* text-align: center; */\n  /* background-size: 400% 400%;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  animation: rainbow 8s ease infinite;; */\n  font-size: 35px;\n}\n\n.items--by--date,\n.project--list {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 8px;\n}\n\n.item--by--date--title,\n.project--list--title {\n  font-size: 20px;\n  font-weight: bold;\n  font-family: 'SF-bold';\n  height: max-content;\n}\n\n.items--by--date button,\n.project--list-btn {\n  color: var(--font-color);\n  /* width: 100px; */\n  padding: 5px;\n  background: none;\n  border: none;\n  font-size: 16px;\n  font-family: 'SF-regular', sans-serif;\n  text-align: left;\n}\n\n.items--by--date button:hover,\n.project--list-btn:hover {\n  transition: 0.3s;\n  cursor: pointer;\n  /* font-family: 'SF-bold'; */\n  font-weight: bold;\n  /* color: var(--hover-blue-color); */\n}\n\n.items--by--date button:active,\n.project--list-btn:active {\n  transition: 0.1s;\n  font-family: 'SF-regular';\n  font-weight: 600;\n  color: whitesmoke;\n}\n\n.dateDiv {\n  display: flex;\n  gap: 5px;\n  justify-content: center;\n}\n\n.date--div--img {\n  height: 24px;\n  width: 24px;\n}\n\n.date--div--img.inbox {\n  content: url("+w+");\n}\n\n.date--div--img.today  {\n  content: url("+B+");\n}\n\n.date--div--img.this--week {\n  content: url("+x+");\n}\n\n.project--div {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.project--remove--btn {\n  color: red;\n  height: 14px;\n  width: 14px;\n  background: url("+k+");\n  border: none;\n  background-repeat: no-repeat;\n  background-size: cover;\n  /* background-position-x: 98%;\n  background-position-y: center; */\n}\n\n.project--remove--btn:hover {\n  transition: 0.2s;\n  cursor: pointer;\n  height: 18px;\n  width: 18px;\n}\n\n.new--project--button {\n  align-self: center;\n  background-color: none;\n  display: inline-block;\n  border: none;\n  padding: 8px 12px;\n  margin: 0;\n  margin-top: 1rem;\n  text-decoration: none;\n  background: var(--background-blue-color);\n  color: #ffffff;\n  font-family: sans-serif;\n  font-size: 1rem;\n  cursor: pointer;\n  text-align: center;\n  transition: background 0.3s ease-in-out,\n    transform 0.3s ease;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n.new--project--button:hover {\n  background: #0053ba;\n}\n\n.new--project--button:active {\n  transform: scale(0.99);\n  background: var(--background-blue-color);\n}\n\n.input--btn--div {\n  display: flex;\n  gap: 4px;\n  justify-content: space-evenly;\n  font-size: 10px;\n}\n\n.input--btn--div button {\n  background-color: #04AA6D;\n  color: white;\n  padding: 8px 10px;\n  border: none;\n  cursor: pointer;\n  width: 70px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n  opacity: 0.8;\n}\n\n.input--btn--div .project--cancel--btn {\n  background-color: red;\n}\n\n.input--btn--div button:hover {\n  opacity: 1;\n}\n\n.main--content {\n  padding: 0.5rem;\n  margin-left: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n\n.new--task--form,\n.edit--task--form {\n  width: auto;\n  height: calc(300px);\n  position: absolute;\n  padding: 5px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  border: 3px solid #f1f1f1;\n  z-index: 9;\n  font-size: 14px;\n  background-color: white;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n}\n\n.form--title {\n  font-size: 20px;\n  font-family: 'pacifico';\n  align-self: center;\n  margin-bottom: 5px;\n  padding: 0;\n}\n\n.new--task--form input,\n.edit--task--form input {\n  width: 90%;\n  padding: 5px;\n  margin: 5px 0 5px 0;\n  border: none;\n  background: #f1f1f1;\n  border-radius: 4px;\n  margin-left: 2.5%;\n}\n\n.new--task--form label,\n.edit--task--form label {\n  margin-left: 2.5%;\n}\n\n.priority,\n.project {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 5px;\n\n}\n\n.priority select,\n.project select {\n  width: 150px;\n  margin-right: 2.5%;\n}\n\n#submit--button,\n#cancel--button,\n#submit--edit--button,\n#cancel--edit--button {\n  font-size: 10px;\n  background-color: #04AA6D;\n  color: white;\n  padding: 8px 10px;\n  border: none;\n  cursor: pointer;\n  width: 70px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n  opacity: 0.8;\n\n}\n\n#submit--button:hover,\n#cancel--button:hover,\n#submit--edit--button:hover,\n#cancel--edit--button:hover {\n  opacity: 1;\n}\n\n#cancel--button,\n#cancel--edit--button {\n  background-color: red;\n}\n\n.main--content--div {\n  display: flex;\n  align-items: center;\n  gap: 12px\n}\n\n.main--content--div button {\n  height: 32px;\n  width: 32px;\n  border-radius: 50%;\n  border: none;\n  background-color: #04AA6D;\n  font-size: 1.5rem;\n  color: white;\n  opacity: 0.8;\n  font-family: Arial, Helvetica, sans-serif;\n  /* text-align: center; */\n  line-height: normal;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* justify-content: center; */\n}\n\n.main--content--div button:hover {\n  opacity: 1;\n  cursor: pointer;\n}\n\n.main--content--div button:active {\n  opacity: 0.8;\n}\n\n.main--button--txt {\n  font-weight: bold;\n  font-style: italic;\n}\n\n.task--library h5 {\n  font-family: 'pacifico';\n  font-size: 32px;\n  margin-bottom: 2rem;\n  margin-top: 2rem;\n\n}\n\n.task--library .tasks--to--do h5 {\n  margin-top: 10px;\n}\n\n.task--container {\n  height: 100%;\n  width: 100%;\n  display: grid;\n  gap: 2rem;\n  grid-template-columns: repeat(auto-fit, 200px);\n  grid-template-rows: auto;\n\n}\n\n.task--div {\n  height: 180px;\n  width: 180px;\n  padding: 8px;\n  color: #000;\n  background: var(--background--sticker);\n  font-family: 'Lato';\n  display: block;\n  box-shadow: 5px 5px 7px rgba(33, 33, 33, .7);\n  /* transform: rotate(-6deg); */\n  box-shadow: 5px 5px 7px rgba(33, 33, 33, .7);\n  transition: transform .15s linear;\n  padding: 10px;\n  display: grid;\n  gap: 4px;\n}\n\n/* .task--div:nth-child(even) {\n  transform:rotate(4deg);\n  position:relative;\n  top:5px;\n}\n.task--div:nth-child(3n) {\n  transform:rotate(-3deg);\n  position:relative;\n  top:-5px;\n}\n\n.task--div:nth-child(5n) {\n  transform:rotate(5deg);\n  position:relative;\n  top:-10px;\n} */\n\n.task--div:hover,\n.task--div:focus {\n  box-shadow: 10px 10px 7px rgba(0, 0, 0, .7);\n  transform: scale(1.25);\n  position: relative;\n  z-index: 5;\n}\n\n/* .task--div:nth-child(even) {\n  position:relative;\n  top:5px;\n}\n\n.task--div:nth-child(3n) {\n  position:relative;\n  top:-5px;\n} */\n\n.output--name {\n  font-size: 18px;\n  font-weight: bold;\n  padding-left: 4px;\n}\n\n.output--description {\n  width: 175px;\n  font-style: italic;\n  font-weight: lighter;\n  font-size: 14px;\n  word-wrap: break-word;\n  padding-left: 4px;\n}\n\n.output--project,\n.output--due--date {\n  padding-left: 4px;\n}\n\n.output--priority {\n  border: 1px solid black;\n  font-size: 12px;\n  border-radius: 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100px;\n  height: 15px;\n  color: var(--background-grey-color);\n  padding-left: 4px;\n}\n\n.output--priority.Low {\n  background-color: var(--low-color);\n  border-color: var(--low-color);\n}\n\n.output--priority.Medium {\n  background-color: var(--medium-color);\n  border-color: var(--medium-color);\n}\n\n.output--priority.High {\n  background-color: var(--high-color);\n  border-color: var(--high-color);\n}\n\n.action--buttons {\n  display: flex;\n  justify-content: space-evenly;\n  padding-left: 4px;\n}\n\n.delete--button:hover,\n.edit--button:hover {\n  transform: scale(1.2);\n}\n\n.switch {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding-left: 4px;\n}\n\n.delete--button {\n  cursor: pointer;\n  height: 20px;\n  width: 20px;\n  background: url("+M+");\n  border: none;\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n\n.edit--button {\n  cursor: pointer;\n  height: 20px;\n  width: 20px;\n  background: url("+T+");\n  border: none;\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n\n/* Footer */\n.footer {\n  height: 44px;\n  display: flex;\n  color: whitesmoke;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  border-top: 3px solid var(--golden-color);\n  background-color: var(--background-blue-color);\n}\n\n.footer img {\n  transition: transform 0.25s ease-in-out;\n  height: 22px;\n  content: url("+S+")\n}\n\n.footer img:hover {\n  transform: rotate(360deg) scale(1.3);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['/* #region normalize.css */\n/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15;\n  /* 1 */\n  -webkit-text-size-adjust: 100%;\n  /* 2 */\n}\n\n/* Sections\n       ========================================================================== */\n\n/**\n     * Remove the margin in all browsers.\n     */\n\nbody {\n  margin: 0;\n}\n\n/**\n     * Render the `main` element consistently in IE.\n     */\n\nmain {\n  display: block;\n}\n\n/**\n     * Correct the font size and margin on `h1` elements within `section` and\n     * `article` contexts in Chrome, Firefox, and Safari.\n     */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n       ========================================================================== */\n\n/**\n     * 1. Add the correct box sizing in Firefox.\n     * 2. Show the overflow in Edge and IE.\n     */\n\nhr {\n  box-sizing: content-box;\n  /* 1 */\n  height: 0;\n  /* 1 */\n  overflow: visible;\n  /* 2 */\n}\n\n/**\n     * 1. Correct the inheritance and scaling of font size in all browsers.\n     * 2. Correct the odd `em` font sizing in all browsers.\n     */\n\npre {\n  font-family: monospace, monospace;\n  /* 1 */\n  font-size: 1em;\n  /* 2 */\n}\n\n/* Text-level semantics\n       ========================================================================== */\n\n/**\n     * Remove the gray background on active links in IE 10.\n     */\n\na {\n  background-color: transparent;\n}\n\n/**\n     * 1. Remove the bottom border in Chrome 57-\n     * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n     */\n\nabbr[title] {\n  border-bottom: none;\n  /* 1 */\n  text-decoration: underline;\n  /* 2 */\n  text-decoration: underline dotted;\n  /* 2 */\n}\n\n/**\n     * Add the correct font weight in Chrome, Edge, and Safari.\n     */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n     * 1. Correct the inheritance and scaling of font size in all browsers.\n     * 2. Correct the odd `em` font sizing in all browsers.\n     */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace;\n  /* 1 */\n  font-size: 1em;\n  /* 2 */\n}\n\n/**\n     * Add the correct font size in all browsers.\n     */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n     * Prevent `sub` and `sup` elements from affecting the line height in\n     * all browsers.\n     */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n       ========================================================================== */\n\n/**\n     * Remove the border on images inside links in IE 10.\n     */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n       ========================================================================== */\n\n/**\n     * 1. Change the font styles in all browsers.\n     * 2. Remove the margin in Firefox and Safari.\n     */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit;\n  /* 1 */\n  font-size: 100%;\n  /* 1 */\n  line-height: 1.15;\n  /* 1 */\n  margin: 0;\n  /* 2 */\n}\n\n/**\n     * Show the overflow in IE.\n     * 1. Show the overflow in Edge.\n     */\n\nbutton,\ninput {\n  /* 1 */\n  overflow: visible;\n}\n\n/**\n     * Remove the inheritance of text transform in Edge, Firefox, and IE.\n     * 1. Remove the inheritance of text transform in Firefox.\n     */\n\nbutton,\nselect {\n  /* 1 */\n  text-transform: none;\n}\n\n/**\n     * Correct the inability to style clickable types in iOS and Safari.\n     */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n     * Remove the inner border and padding in Firefox.\n     */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n     * Restore the focus styles unset by the previous rule.\n     */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n     * Correct the padding in Firefox.\n     */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n     * 1. Correct the text wrapping in Edge and IE.\n     * 2. Correct the color inheritance from `fieldset` elements in IE.\n     * 3. Remove the padding so developers are not caught out when they zero out\n     *    `fieldset` elements in all browsers.\n     */\n\nlegend {\n  box-sizing: border-box;\n  /* 1 */\n  color: inherit;\n  /* 2 */\n  display: table;\n  /* 1 */\n  max-width: 100%;\n  /* 1 */\n  padding: 0;\n  /* 3 */\n  white-space: normal;\n  /* 1 */\n}\n\n/**\n     * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n     */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n     * Remove the default vertical scrollbar in IE 10+.\n     */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n     * 1. Add the correct box sizing in IE 10.\n     * 2. Remove the padding in IE 10.\n     */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box;\n  /* 1 */\n  padding: 0;\n  /* 2 */\n}\n\n/**\n     * Correct the cursor style of increment and decrement buttons in Chrome.\n     */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n     * 1. Correct the odd appearance in Chrome and Safari.\n     * 2. Correct the outline style in Safari.\n     */\n\n[type="search"] {\n  -webkit-appearance: textfield;\n  /* 1 */\n  outline-offset: -2px;\n  /* 2 */\n}\n\n/**\n     * Remove the inner padding in Chrome and Safari on macOS.\n     */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n     * 1. Correct the inability to style clickable types in iOS and Safari.\n     * 2. Change font properties to `inherit` in Safari.\n     */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  /* 1 */\n  font: inherit;\n  /* 2 */\n}\n\n/* Interactive\n       ========================================================================== */\n\n/*\n     * Add the correct display in Edge, IE 10+, and Firefox.\n     */\n\ndetails {\n  display: block;\n}\n\n/*\n     * Add the correct display in all browsers.\n     */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n       ========================================================================== */\n\n/**\n     * Add the correct display in IE 10+.\n     */\n\ntemplate {\n  display: none;\n}\n\n/**\n     * Add the correct display in IE 10.\n     */\n\n[hidden] {\n  display: none;\n}\n\n\n/* #endregion */\n:root {\n  --background-grey-color: #F8F7FA;\n  --background-blue-color: #6081B3;\n  --hover-blue-color: #203d6a;\n  --font-color: rgb(32, 32, 32);\n  --low-color: #A0D468;\n  --medium-color: #FFCE54;\n  --high-color: #f15050;\n  --background--sticker: rgb(249, 249, 181);\n}\n\n@font-face {\n  font-family: \'SF-regular\';\n  src: url(../src/assets/fonts/San\\ Francisco\\ Regular.ttf);\n\n  font-family: \'SF-bold\';\n  src: url(../src/assets/fonts/San\\ Francisco\\ Bold.ttf);\n\n  font-family: \'pacifico\';\n  src: url(../src/assets/fonts/Pacifico-Regular.ttf);\n}\n\n@keyframes rainbow {\n  0% {\n    background-position: 0% 50%\n  }\n\n  50% {\n    background-position: 100% 25%\n  }\n\n  100% {\n    background-position: 0% 50%\n  }\n}\n\nhtml,\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: \'SF-regular\', sans-serif;\n  color: var(--font-color);\n}\n\nbody {\n  min-height: 100vh;\n  box-sizing: border-box;\n}\n\nbutton {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n#content {\n  min-height: 100vh;\n  min-width: 100vw;\n  display: grid;\n  grid-template-rows: 1fr min-content;\n}\n\n.main {\n  display: grid;\n  grid-template-columns: 200px 1fr;\n}\n\n.sideBar {\n  background-color: var(--background-grey-color);\n  display: grid;\n  grid-template-rows: 70px max-content max-content 1fr;\n  gap: 1rem;\n  padding: 0.5rem;\n  border-right: 0.5px solid rgb(238, 236, 236);\n\n}\n\n.main--title--p {\n  height: 100%;\n  font-family: \'pacifico\', sans-serif;\n  /* background-image: repeating-linear-gradient(to left,yellow, orange, red, yellow); */\n  /* text-align: center; */\n  /* background-size: 400% 400%;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  animation: rainbow 8s ease infinite;; */\n  font-size: 35px;\n}\n\n.items--by--date,\n.project--list {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 8px;\n}\n\n.item--by--date--title,\n.project--list--title {\n  font-size: 20px;\n  font-weight: bold;\n  font-family: \'SF-bold\';\n  height: max-content;\n}\n\n.items--by--date button,\n.project--list-btn {\n  color: var(--font-color);\n  /* width: 100px; */\n  padding: 5px;\n  background: none;\n  border: none;\n  font-size: 16px;\n  font-family: \'SF-regular\', sans-serif;\n  text-align: left;\n}\n\n.items--by--date button:hover,\n.project--list-btn:hover {\n  transition: 0.3s;\n  cursor: pointer;\n  /* font-family: \'SF-bold\'; */\n  font-weight: bold;\n  /* color: var(--hover-blue-color); */\n}\n\n.items--by--date button:active,\n.project--list-btn:active {\n  transition: 0.1s;\n  font-family: \'SF-regular\';\n  font-weight: 600;\n  color: whitesmoke;\n}\n\n.dateDiv {\n  display: flex;\n  gap: 5px;\n  justify-content: center;\n}\n\n.date--div--img {\n  height: 24px;\n  width: 24px;\n}\n\n.date--div--img.inbox {\n  content: url(./assets/images/inbox.png);\n}\n\n.date--div--img.today  {\n  content: url(./assets/images/star.png);\n}\n\n.date--div--img.this--week {\n  content: url(./assets/images/calendar.png);\n}\n\n.project--div {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.project--remove--btn {\n  color: red;\n  height: 14px;\n  width: 14px;\n  background: url(./assets/images/remove.png);\n  border: none;\n  background-repeat: no-repeat;\n  background-size: cover;\n  /* background-position-x: 98%;\n  background-position-y: center; */\n}\n\n.project--remove--btn:hover {\n  transition: 0.2s;\n  cursor: pointer;\n  height: 18px;\n  width: 18px;\n}\n\n.new--project--button {\n  align-self: center;\n  background-color: none;\n  display: inline-block;\n  border: none;\n  padding: 8px 12px;\n  margin: 0;\n  margin-top: 1rem;\n  text-decoration: none;\n  background: var(--background-blue-color);\n  color: #ffffff;\n  font-family: sans-serif;\n  font-size: 1rem;\n  cursor: pointer;\n  text-align: center;\n  transition: background 0.3s ease-in-out,\n    transform 0.3s ease;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n.new--project--button:hover {\n  background: #0053ba;\n}\n\n.new--project--button:active {\n  transform: scale(0.99);\n  background: var(--background-blue-color);\n}\n\n.input--btn--div {\n  display: flex;\n  gap: 4px;\n  justify-content: space-evenly;\n  font-size: 10px;\n}\n\n.input--btn--div button {\n  background-color: #04AA6D;\n  color: white;\n  padding: 8px 10px;\n  border: none;\n  cursor: pointer;\n  width: 70px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n  opacity: 0.8;\n}\n\n.input--btn--div .project--cancel--btn {\n  background-color: red;\n}\n\n.input--btn--div button:hover {\n  opacity: 1;\n}\n\n.main--content {\n  padding: 0.5rem;\n  margin-left: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n\n.new--task--form,\n.edit--task--form {\n  width: auto;\n  height: calc(300px);\n  position: absolute;\n  padding: 5px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  border: 3px solid #f1f1f1;\n  z-index: 9;\n  font-size: 14px;\n  background-color: white;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n}\n\n.form--title {\n  font-size: 20px;\n  font-family: \'pacifico\';\n  align-self: center;\n  margin-bottom: 5px;\n  padding: 0;\n}\n\n.new--task--form input,\n.edit--task--form input {\n  width: 90%;\n  padding: 5px;\n  margin: 5px 0 5px 0;\n  border: none;\n  background: #f1f1f1;\n  border-radius: 4px;\n  margin-left: 2.5%;\n}\n\n.new--task--form label,\n.edit--task--form label {\n  margin-left: 2.5%;\n}\n\n.priority,\n.project {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 5px;\n\n}\n\n.priority select,\n.project select {\n  width: 150px;\n  margin-right: 2.5%;\n}\n\n#submit--button,\n#cancel--button,\n#submit--edit--button,\n#cancel--edit--button {\n  font-size: 10px;\n  background-color: #04AA6D;\n  color: white;\n  padding: 8px 10px;\n  border: none;\n  cursor: pointer;\n  width: 70px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n  opacity: 0.8;\n\n}\n\n#submit--button:hover,\n#cancel--button:hover,\n#submit--edit--button:hover,\n#cancel--edit--button:hover {\n  opacity: 1;\n}\n\n#cancel--button,\n#cancel--edit--button {\n  background-color: red;\n}\n\n.main--content--div {\n  display: flex;\n  align-items: center;\n  gap: 12px\n}\n\n.main--content--div button {\n  height: 32px;\n  width: 32px;\n  border-radius: 50%;\n  border: none;\n  background-color: #04AA6D;\n  font-size: 1.5rem;\n  color: white;\n  opacity: 0.8;\n  font-family: Arial, Helvetica, sans-serif;\n  /* text-align: center; */\n  line-height: normal;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* justify-content: center; */\n}\n\n.main--content--div button:hover {\n  opacity: 1;\n  cursor: pointer;\n}\n\n.main--content--div button:active {\n  opacity: 0.8;\n}\n\n.main--button--txt {\n  font-weight: bold;\n  font-style: italic;\n}\n\n.task--library h5 {\n  font-family: \'pacifico\';\n  font-size: 32px;\n  margin-bottom: 2rem;\n  margin-top: 2rem;\n\n}\n\n.task--library .tasks--to--do h5 {\n  margin-top: 10px;\n}\n\n.task--container {\n  height: 100%;\n  width: 100%;\n  display: grid;\n  gap: 2rem;\n  grid-template-columns: repeat(auto-fit, 200px);\n  grid-template-rows: auto;\n\n}\n\n.task--div {\n  height: 180px;\n  width: 180px;\n  padding: 8px;\n  color: #000;\n  background: var(--background--sticker);\n  font-family: \'Lato\';\n  display: block;\n  box-shadow: 5px 5px 7px rgba(33, 33, 33, .7);\n  /* transform: rotate(-6deg); */\n  box-shadow: 5px 5px 7px rgba(33, 33, 33, .7);\n  transition: transform .15s linear;\n  padding: 10px;\n  display: grid;\n  gap: 4px;\n}\n\n/* .task--div:nth-child(even) {\n  transform:rotate(4deg);\n  position:relative;\n  top:5px;\n}\n.task--div:nth-child(3n) {\n  transform:rotate(-3deg);\n  position:relative;\n  top:-5px;\n}\n\n.task--div:nth-child(5n) {\n  transform:rotate(5deg);\n  position:relative;\n  top:-10px;\n} */\n\n.task--div:hover,\n.task--div:focus {\n  box-shadow: 10px 10px 7px rgba(0, 0, 0, .7);\n  transform: scale(1.25);\n  position: relative;\n  z-index: 5;\n}\n\n/* .task--div:nth-child(even) {\n  position:relative;\n  top:5px;\n}\n\n.task--div:nth-child(3n) {\n  position:relative;\n  top:-5px;\n} */\n\n.output--name {\n  font-size: 18px;\n  font-weight: bold;\n  padding-left: 4px;\n}\n\n.output--description {\n  width: 175px;\n  font-style: italic;\n  font-weight: lighter;\n  font-size: 14px;\n  word-wrap: break-word;\n  padding-left: 4px;\n}\n\n.output--project,\n.output--due--date {\n  padding-left: 4px;\n}\n\n.output--priority {\n  border: 1px solid black;\n  font-size: 12px;\n  border-radius: 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100px;\n  height: 15px;\n  color: var(--background-grey-color);\n  padding-left: 4px;\n}\n\n.output--priority.Low {\n  background-color: var(--low-color);\n  border-color: var(--low-color);\n}\n\n.output--priority.Medium {\n  background-color: var(--medium-color);\n  border-color: var(--medium-color);\n}\n\n.output--priority.High {\n  background-color: var(--high-color);\n  border-color: var(--high-color);\n}\n\n.action--buttons {\n  display: flex;\n  justify-content: space-evenly;\n  padding-left: 4px;\n}\n\n.delete--button:hover,\n.edit--button:hover {\n  transform: scale(1.2);\n}\n\n.switch {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding-left: 4px;\n}\n\n.delete--button {\n  cursor: pointer;\n  height: 20px;\n  width: 20px;\n  background: url(../src/assets/images/trash.png);\n  border: none;\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n\n.edit--button {\n  cursor: pointer;\n  height: 20px;\n  width: 20px;\n  background: url(../src/assets/images/edit.png);\n  border: none;\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n\n/* Footer */\n.footer {\n  height: 44px;\n  display: flex;\n  color: whitesmoke;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  border-top: 3px solid var(--golden-color);\n  background-color: var(--background-blue-color);\n}\n\n.footer img {\n  transition: transform 0.25s ease-in-out;\n  height: 22px;\n  content: url(./assets/images/github-icon.png)\n}\n\n.footer img:hover {\n  transform: rotate(360deg) scale(1.3);\n}'],sourceRoot:""}]);const j=b},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,i,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var d=0;d<n.length;d++){var A=[].concat(n[d]);r&&a[A[0]]||(void 0!==o&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=o),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),i&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=i):A[4]="".concat(i)),e.push(A))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},a=[],s=0;s<n.length;s++){var c=n[s],d=r.base?c[0]+r.base:c[0],A=o[d]||0,l="".concat(d," ").concat(A);o[d]=A+1;var u=t(l),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=i(p,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:m,references:1})}a.push(l)}return a}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var o=r(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var s=t(o[a]);e[s].references--}for(var c=r(n,i),d=0;d<o.length;d++){var A=t(o[d]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}o=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},142:(n,e,t)=>{n.exports=t.p+"images/cd6ca34752aaf52b20c2.png"},658:(n,e,t)=>{n.exports=t.p+"images/0f46e2728eb984e21ce8.png"},573:(n,e,t)=>{n.exports=t.p+"images/987334e9f782cc505f25.png"},168:(n,e,t)=>{n.exports=t.p+"images/0f2b3fde26e81f3c5079.png"},821:(n,e,t)=>{n.exports=t.p+"images/1c2963ee3467352a1681.png"},111:(n,e,t)=>{n.exports=t.p+"images/d0cbd94e0a4a62fc2bf4.png"},370:(n,e,t)=>{n.exports=t.p+"images/c4e35861d2606e76ed78.png"},4:(n,e,t)=>{n.exports=t.p+"fonts/c0d735fc04154e03a691.ttf"},91:(n,e,t)=>{n.exports=t.p+"fonts/b68d4b81282342ec9f9e.ttf"},369:(n,e,t)=>{n.exports=t.p+"fonts/cb07a66458c9311b6721.ttf"}},e={};function t(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),i=t.n(r),o=t(569),a=t.n(o),s=t(565),c=t.n(s),d=t(216),A=t.n(d),l=t(589),u=t.n(l),p=t(426),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=a().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=A(),e()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;const h=[{name:"All tasks",class:"nav--item",id:"inbox",source:"../src/assets/images/inbox.png"},{name:"Today",class:"nav--item",id:"today",source:"../src/assets/images/star.png"},{name:"This week",class:"nav--item",id:"this--week",source:"../src/assets/images/calendar.png"}];function f(){const n=document.getElementById("content");n.appendChild(function(){const n=document.createElement("main");return n.classList.add("main"),n}()),function(){const n=document.querySelector("main"),e=document.createElement("sideBar");e.classList.add("sideBar");const t=document.createElement("div");t.classList.add("main--title"),e.appendChild(t);const r=document.createElement("p");r.classList.add("main--title--p"),r.innerText="My To-Do",t.appendChild(r);const i=document.createElement("div");i.classList.add("items--by--date"),e.appendChild(i);const o=document.createElement("p");o.classList.add("item--by--date--title"),o.innerText="Home",i.appendChild(o),h.forEach((n=>{let e=document.createElement("div");e.classList.add("dateDiv"),i.appendChild(e);let t=document.createElement("img");t.classList.add("date--div--img"),t.classList.add(n.id),e.appendChild(t);let r=document.createElement("button");r.innerText=n.name,r.classList.add(n.class),r.setAttribute("id",n.id),e.appendChild(r)})),n.appendChild(e);const a=document.createElement("div");a.classList.add("project--list"),e.appendChild(a);const s=document.createElement("div");s.classList.add("side--div"),e.appendChild(s)}(),function(){const n=document.querySelector("main"),e=document.createElement("div");e.classList.add("main--content"),n.appendChild(e),function(){const n=document.querySelector(".main--content"),e=document.createElement("div");e.classList.add("main--content--div"),n.appendChild(e);const t=document.createElement("button");t.classList.add("main--button"),t.innerText="+",e.appendChild(t);const r=document.createElement("p");r.classList.add("main--button--txt"),r.innerText="Add Task",e.appendChild(r)}(),function(){const n=document.querySelector(".main--content"),e=document.createElement("div");e.classList.add("task--library");const t=document.createElement("div");t.classList.add("tasks--to--do"),e.appendChild(t);const r=document.createElement("h5");r.innerText="Tasks to do :",t.appendChild(r);const i=document.createElement("div");i.classList.add("tasks--done"),e.appendChild(i);const o=document.createElement("h5");o.innerText="Tasks done :",i.appendChild(o),n.appendChild(e)}()}(),n.appendChild(function(){const n=document.createElement("footer");n.classList.add("footer");const e=document.createElement("p");e.setAttribute("id","footer-text"),n.innerText="© disconico";const t=document.createElement("a");t.setAttribute("href","https://github.com/disconico"),t.setAttribute("target","_blank");const r=document.createElement("img");return r.setAttribute("id","github-icon"),t.appendChild(r),n.appendChild(e),n.appendChild(t),n}())}function g(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function E(n){return g(1,arguments),n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)}function b(n){g(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function C(n){if(g(1,arguments),!E(n)&&"number"!=typeof n)return!1;var e=b(n);return!isNaN(Number(e))}var v={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function y(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const w={date:y({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:y({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:y({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var B={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function x(n){return function(e,t){var r,i=t||{};if("formatting"===(i.context?String(i.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,a=i.width?String(i.width):o;r=n.formattingValues[a]||n.formattingValues[o]}else{var s=n.defaultWidth,c=i.width?String(i.width):n.defaultWidth;r=n.values[c]||n.values[s]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const k={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:x({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:x({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:x({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:x({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:x({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function M(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,i=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],o=e.match(i);if(!o)return null;var a,s=o[0],c=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],d=Array.isArray(c)?S(c,(function(n){return n.test(s)})):T(c,(function(n){return n.test(s)}));a=n.valueCallback?n.valueCallback(d):d,a=t.valueCallback?t.valueCallback(a):a;var A=e.slice(s.length);return{value:a,rest:A}}}function T(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function S(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var j,L={ordinalNumber:(j={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(j.matchPattern);if(!t)return null;var r=t[0],i=n.match(j.parsePattern);if(!i)return null;var o=j.valueCallback?j.valueCallback(i[0]):i[0];o=e.valueCallback?e.valueCallback(o):o;var a=n.slice(r.length);return{value:o,rest:a}}),era:M({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:M({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:M({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:M({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:M({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const D={code:"en-US",formatDistance:function(n,e,t){var r,i=v[n];return r="string"==typeof i?i:1===e?i.one:i.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:w,formatRelative:function(n,e,t,r){return B[n]},localize:k,match:L,options:{weekStartsOn:0,firstWeekContainsDate:1}};function z(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function Y(n,e){g(2,arguments);var t=b(n).getTime(),r=z(e);return new Date(t+r)}function F(n,e){g(2,arguments);var t=z(e);return Y(n,-t)}var N=864e5;function q(n){g(1,arguments);var e=1,t=b(n),r=t.getUTCDay(),i=(r<e?7:0)+r-e;return t.setUTCDate(t.getUTCDate()-i),t.setUTCHours(0,0,0,0),t}function U(n){g(1,arguments);var e=b(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var i=q(r),o=new Date(0);o.setUTCFullYear(t,0,4),o.setUTCHours(0,0,0,0);var a=q(o);return e.getTime()>=i.getTime()?t+1:e.getTime()>=a.getTime()?t:t-1}function P(n){g(1,arguments);var e=U(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var r=q(t);return r}var I=6048e5;function W(n,e){g(1,arguments);var t=e||{},r=t.locale,i=r&&r.options&&r.options.weekStartsOn,o=null==i?0:z(i),a=null==t.weekStartsOn?o:z(t.weekStartsOn);if(!(a>=0&&a<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=b(n),c=s.getUTCDay(),d=(c<a?7:0)+c-a;return s.setUTCDate(s.getUTCDate()-d),s.setUTCHours(0,0,0,0),s}function R(n,e){g(1,arguments);var t=b(n),r=t.getUTCFullYear(),i=e||{},o=i.locale,a=o&&o.options&&o.options.firstWeekContainsDate,s=null==a?1:z(a),c=null==i.firstWeekContainsDate?s:z(i.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setUTCFullYear(r+1,0,c),d.setUTCHours(0,0,0,0);var A=W(d,e),l=new Date(0);l.setUTCFullYear(r,0,c),l.setUTCHours(0,0,0,0);var u=W(l,e);return t.getTime()>=A.getTime()?r+1:t.getTime()>=u.getTime()?r:r-1}function O(n,e){g(1,arguments);var t=e||{},r=t.locale,i=r&&r.options&&r.options.firstWeekContainsDate,o=null==i?1:z(i),a=null==t.firstWeekContainsDate?o:z(t.firstWeekContainsDate),s=R(n,e),c=new Date(0);c.setUTCFullYear(s,0,a),c.setUTCHours(0,0,0,0);var d=W(c,e);return d}var Z=6048e5;function H(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const G=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return H("yy"===e?r%100:r,e.length)},Q=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):H(t+1,2)},X=function(n,e){return H(n.getUTCDate(),e.length)},J=function(n,e){return H(n.getUTCHours()%12||12,e.length)},V=function(n,e){return H(n.getUTCHours(),e.length)},_=function(n,e){return H(n.getUTCMinutes(),e.length)},$=function(n,e){return H(n.getUTCSeconds(),e.length)},K=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return H(Math.floor(r*Math.pow(10,t-3)),e.length)};var nn={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),i=r>0?r:1-r;return t.ordinalNumber(i,{unit:"year"})}return G(n,e)},Y:function(n,e,t,r){var i=R(n,r),o=i>0?i:1-i;return"YY"===e?H(o%100,2):"Yo"===e?t.ordinalNumber(o,{unit:"year"}):H(o,e.length)},R:function(n,e){return H(U(n),e.length)},u:function(n,e){return H(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return H(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return H(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return Q(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return H(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var i=function(n,e){g(1,arguments);var t=b(n),r=W(t,e).getTime()-O(t,e).getTime();return Math.round(r/Z)+1}(n,r);return"wo"===e?t.ordinalNumber(i,{unit:"week"}):H(i,e.length)},I:function(n,e,t){var r=function(n){g(1,arguments);var e=b(n),t=q(e).getTime()-P(e).getTime();return Math.round(t/I)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):H(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):X(n,e)},D:function(n,e,t){var r=function(n){g(1,arguments);var e=b(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),i=t-r;return Math.floor(i/N)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):H(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var i=n.getUTCDay(),o=(i-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return H(o,2);case"eo":return t.ordinalNumber(o,{unit:"day"});case"eee":return t.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(i,{width:"short",context:"formatting"});default:return t.day(i,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var i=n.getUTCDay(),o=(i-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return H(o,e.length);case"co":return t.ordinalNumber(o,{unit:"day"});case"ccc":return t.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(i,{width:"narrow",context:"standalone"});case"cccccc":return t.day(i,{width:"short",context:"standalone"});default:return t.day(i,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),i=0===r?7:r;switch(e){case"i":return String(i);case"ii":return H(i,e.length);case"io":return t.ordinalNumber(i,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,i=n.getUTCHours();switch(r=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,i=n.getUTCHours();switch(r=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return J(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):V(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):H(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):H(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):_(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):$(n,e)},S:function(n,e){return K(n,e)},X:function(n,e,t,r){var i=(r._originalDate||n).getTimezoneOffset();if(0===i)return"Z";switch(e){case"X":return tn(i);case"XXXX":case"XX":return rn(i);default:return rn(i,":")}},x:function(n,e,t,r){var i=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return tn(i);case"xxxx":case"xx":return rn(i);default:return rn(i,":")}},O:function(n,e,t,r){var i=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+en(i,":");default:return"GMT"+rn(i,":")}},z:function(n,e,t,r){var i=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+en(i,":");default:return"GMT"+rn(i,":")}},t:function(n,e,t,r){var i=r._originalDate||n;return H(Math.floor(i.getTime()/1e3),e.length)},T:function(n,e,t,r){return H((r._originalDate||n).getTime(),e.length)}};function en(n,e){var t=n>0?"-":"+",r=Math.abs(n),i=Math.floor(r/60),o=r%60;if(0===o)return t+String(i);var a=e||"";return t+String(i)+a+H(o,2)}function tn(n,e){return n%60==0?(n>0?"-":"+")+H(Math.abs(n)/60,2):rn(n,e)}function rn(n,e){var t=e||"",r=n>0?"-":"+",i=Math.abs(n);return r+H(Math.floor(i/60),2)+t+H(i%60,2)}const on=nn;function an(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function sn(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}const cn={p:sn,P:function(n,e){var t,r=n.match(/(P+)(p+)?/)||[],i=r[1],o=r[2];if(!o)return an(n,e);switch(i){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",an(i,e)).replace("{{time}}",sn(o,e))}};function dn(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var An=["D","DD"],ln=["YY","YYYY"];function un(n){return-1!==An.indexOf(n)}function pn(n){return-1!==ln.indexOf(n)}function mn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var hn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,fn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,gn=/^'([^]*?)'?$/,En=/''/g,bn=/[a-zA-Z]/;function Cn(n,e,t){g(2,arguments);var r=String(e),i=t||{},o=i.locale||D,a=o.options&&o.options.firstWeekContainsDate,s=null==a?1:z(a),c=null==i.firstWeekContainsDate?s:z(i.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=o.options&&o.options.weekStartsOn,A=null==d?0:z(d),l=null==i.weekStartsOn?A:z(i.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var u=b(n);if(!C(u))throw new RangeError("Invalid time value");var p=dn(u),m=F(u,p),h={firstWeekContainsDate:c,weekStartsOn:l,locale:o,_originalDate:u},f=r.match(fn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,cn[e])(n,o.formatLong,h):n})).join("").match(hn).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return vn(t);var a=on[r];if(a)return!i.useAdditionalWeekYearTokens&&pn(t)&&mn(t,e,n),!i.useAdditionalDayOfYearTokens&&un(t)&&mn(t,e,n),a(m,t,o.localize,h);if(r.match(bn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("");return f}function vn(n){return n.match(gn)[1].replace(En,"'")}const yn=(n,e,t,r,i,o="false")=>({title:n,description:e,dueDate:t,priority:r,project:i,status:o,setTitle(n){this.title=n},getTitle(){return this.title},getDescription(){return this.description},setDescription(n){this.description=n},getDueDate(){return this.dueDate},getDateFormatted(n){return""===this.dueDate?Cn(new Date,"dd/MM/yyy"):Cn(new Date(this.dueDate),"dd/MM/yyyy")},setDueDate(n){this.dueDate=b(new Date(n))},getPriority(){return this.priority},setPriority(n){this.priority=n},setProject(n){this.project=n},getStatus(){return this.status},toggleStatus(){"false"===this.status?this.status="true":"true"===this.status&&(this.status="false")}}),wn=(n,e)=>({name:n,tasks:[e],setName(n){this.name=n},getName(){return this.name},setTasks(n){this.tasks=n},getTasks(){return this.tasks}});let Bn=[],xn=[],kn="",Mn="",Tn=!1,Sn=!1;function jn(){let n=JSON.stringify(xn);localStorage.setItem("myTasks",n)}function Ln(){let n=JSON.stringify(Bn);localStorage.setItem("myProjects",n)}function Dn(){return Tn=!0}function zn(){return Tn=!1}function Yn(n){return Mn=n}function Fn(){return Sn=!0}function Nn(){return Sn=!1}function qn(){const n=document.querySelector(".main--content"),e=document.createElement("form");e.classList.add("new--task--form"),n.appendChild(e);const t=document.createElement("div");t.classList.add("form--title"),t.innerText="Add New Task",e.appendChild(t),Un.forEach((n=>{const t=document.createElement("div");e.appendChild(t),t.classList.add(n.description),t.appendChild(n.setLabel()),t.appendChild(n.setInput())}));const r=document.createElement("div");r.classList.add("input--btn--div"),e.appendChild(r),Pn.forEach((n=>{const e=document.createElement("div");r.appendChild(e),e.classList.add(n.description),e.appendChild(n.setLabel()),e.appendChild(n.setInput())}))}const Un=[new class{constructor(n){this.description=n}setLabel(){let n=document.createElement("label");return n.setAttribute("for",this.description),n.innerText="Name :",n}setInput(){let n=document.createElement("input");return n.type="text",n.name=this.description,n.id=this.description,n.maxLength=16,n.required=!0,n}}("name"),new class{constructor(n){this.description=n}setLabel(){let n=document.createElement("label");return n.setAttribute("for",this.description),n.innerText="Description :",n}setInput(){let n=document.createElement("input");return n.type="text",n.name=this.description,n.id=this.description,n.maxLength=50,n.required=!0,n}}("description"),new class{constructor(n){this.description=n}setLabel(){let n=document.createElement("label");return n.setAttribute("for",this.description),n.innerText="Due date :",n}setInput(){let n=document.createElement("input");return n.type="date",n.name=this.description,n.id=this.description,n.required=!1,n}}("due--date"),new class{constructor(n){this.description=n}setLabel(){let n=document.createElement("label");return n.setAttribute("for",this.description),n.innerText="Priority :",n}setInput(){let n=document.createElement("select");return n.name=this.description,n.id=this.description,n.required=!0,Wn.forEach((e=>{const t=document.createElement("option");t.value=e.priority,t.innerText=e.priority,n.appendChild(t)})),n}}("priority"),new class{constructor(n){this.description=n}setLabel(){let n=document.createElement("label");return n.setAttribute("for",this.description),n.innerText="Project :",n}setInput(){let n=document.createElement("select");n.name=this.description,n.id=this.description,n.required=!0;let e=document.createElement("option");return e.value="No project",e.innerText="No project",n.appendChild(e),Bn.forEach((e=>{const t=document.createElement("option");t.value=e.name,t.innerText=e.name,n.appendChild(t)})),n}}("project")],Pn=[new class{constructor(n){this.description=n}setLabel(){let n=document.createElement("label");return n.setAttribute("for",this.description),n}setInput(){let n=document.createElement("button");return n.classList.add(this.description),n.setAttribute("id",this.description),n.setAttribute("type","button"),n.innerText="✓",n}}("submit--button"),new class{constructor(n){this.description=n}setLabel(){let n=document.createElement("label");return n.setAttribute("for",this.description),n}setInput(){let n=document.createElement("button");return n.classList.add(this.description),n.setAttribute("id",this.description),n.setAttribute("type","button"),n.innerText="×",n}}("cancel--button")],In=n=>({priority:n});let Wn=[In("Low"),In("Medium"),In("High")];function Rn(){const n=document.querySelector(".main--content"),e=document.querySelector(".new--task--form");n.removeChild(e)}function On(){const n=document.querySelector(".project--list"),e=document.querySelector(".project--input--div");n.removeChild(e)}const Zn=[new class{constructor(n){this.description=n}setLabel(){let n=document.createElement("label");return n.setAttribute("for",this.description),n.innerText="Name :",n}setInput(){let n=document.createElement("input");return n.type="text",n.name=this.description,n.id=this.description,n.required=!0,n.maxLength=16,n.value=ee.title,n}}("name"),new class{constructor(n){this.description=n}setLabel(){let n=document.createElement("label");return n.setAttribute("for",this.description),n.innerText="Description :",n}setInput(){let n=document.createElement("input");return n.type="text",n.name=this.description,n.id=this.description,n.maxLength=50,n.required=!0,n.value=ee.description,n}}("description"),new class{constructor(n){this.description=n}setLabel(){let n=document.createElement("label");return n.setAttribute("for",this.description),n.innerText="Due date :",n}setInput(){let n=document.createElement("input");return n.type="date",n.name=this.description,n.id=this.description,n.required=!1,n.value=b(ee.dueDate),n}}("due--date"),new class{constructor(n){this.description=n}setLabel(){let n=document.createElement("label");return n.setAttribute("for",this.description),n.innerText="Priority :",n}setInput(){let n=document.createElement("select");n.name=this.description,n.id=this.description,n.required=!0;let e=Qn;return e.forEach((t=>{const r=document.createElement("option");r.value=t.priority,r.innerText=t.priority,function(){for(var n=0;n<e.length;n++)if(ee.priority===r.innerText)return void(r.selected=!0)}(),n.appendChild(r)})),n}}("priority"),new class{constructor(n){this.description=n}setLabel(){let n=document.createElement("label");return n.setAttribute("for",this.description),n.innerText="Project :",n}setInput(){let n=document.createElement("select");n.name=this.description,n.id=this.description,n.required=!0;let e=document.createElement("option");e.value="No project",e.innerText="No project",n.appendChild(e);let t=Bn;return t.forEach((e=>{const r=document.createElement("option");r.value=e.name,r.innerText=e.name,function(){for(var n=0;n<t.length;n++)if(ee.project===r.innerText)return void(r.selected=!0)}(),n.appendChild(r)})),n}}("project")],Hn=[new class{constructor(n){this.description=n}setLabel(){let n=document.createElement("label");return n.setAttribute("for",this.description),n}setInput(){let n=document.createElement("button");return n.classList.add(this.description),n.setAttribute("id",this.description),n.setAttribute("type","button"),n.innerText="Edit task",n}}("submit--edit--button"),new class{constructor(n){this.description=n}setLabel(){let n=document.createElement("label");return n.setAttribute("for",this.description),n}setInput(){let n=document.createElement("button");return n.classList.add(this.description),n.setAttribute("id",this.description),n.setAttribute("type","button"),n.innerText="Cancel",n}}("cancel--edit--button")],Gn=n=>({priority:n});let Qn=[Gn("Low"),Gn("Medium"),Gn("High")];function Xn(){const n=document.querySelector(".main--content"),e=document.querySelector(".edit--task--form");n.removeChild(e)}function Jn(n){g(1,arguments);var e=b(n);return e.setHours(0,0,0,0),e}function Vn(n,e){g(2,arguments);var t=Jn(n),r=Jn(e);return t.getTime()===r.getTime()}function _n(n,e){g(1,arguments);var t=e||{},r=t.locale,i=r&&r.options&&r.options.weekStartsOn,o=null==i?0:z(i),a=null==t.weekStartsOn?o:z(t.weekStartsOn);if(!(a>=0&&a<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=b(n),c=s.getDay(),d=(c<a?7:0)+c-a;return s.setDate(s.getDate()-d),s.setHours(0,0,0,0),s}function $n(n,e,t){const r=document.querySelector(".task--library");r.innerHTML="";const i=document.createElement("div");i.classList.add("tasks--to--do"),r.appendChild(i);const o=document.createElement("h5");o.innerText="Tasks to do :",i.appendChild(o);const a=document.createElement("div");a.classList.add("task--container"),i.appendChild(a);const s=document.createElement("div");s.classList.add("tasks--done"),r.appendChild(s);const c=document.createElement("h5");c.innerText="Tasks done :",s.appendChild(c);const d=document.createElement("div");d.classList.add("task--container"),s.appendChild(d),xn.forEach((n=>{""!=n.dueDate?n.setDueDate(n.dueDate):n.setDueDate(new Date)}));let A=n,l=e,u=t,p=[];!function(){if(""===A)return p=xn;if("project"===A)return p=xn.filter((n=>n.project===l));if("date"===A){if("today"===u)return p=xn.filter((n=>function(n){return g(1,arguments),Vn(n,Date.now())}(n.dueDate)));"thisWeek"===u&&(p=xn.filter((n=>function(n,e,t){g(2,arguments);var r=_n(n,t),i=_n(e,t);return r.getTime()===i.getTime()}(n.dueDate,new Date))))}}(),p.forEach((n=>{let e=document.createElement("div");e.classList.add("task--div"),"false"===n.status?a.appendChild(e):"true"===n.status&&d.appendChild(e),e.setAttribute("id",xn.indexOf(n));let t=document.createElement("div");t.classList.add("output--name"),t.innerText=n.title,e.appendChild(t);let r=document.createElement("div");r.classList.add("output--description"),r.innerText=n.description,e.appendChild(r);let i=document.createElement("div");if(i.classList.add("output--due--date"),""!=n.dueDate){let e=xn[xn.indexOf(n)].getDateFormatted();i.innerText=e}else{let e=xn[xn.indexOf(n)].getDateFormatted();i.innerText=e}e.appendChild(i);let o=document.createElement("div");o.classList.add("output--project"),o.innerText=n.project,e.appendChild(o);let s=document.createElement("div");s.classList.add("output--priority"),s.classList.add(n.priority),s.innerText=n.priority,e.appendChild(s);let c=document.createElement("div");c.classList.add("output--status"),e.appendChild(c);let A=document.createElement("label");A.classList.add("switch"),"false"===n.status?A.innerText="Mark as done :  ":"true"===n.status&&(A.innerText="Mark as to do :  "),c.appendChild(A);let l=document.createElement("input");l.type="checkbox",l.classList.add("checkbox"),l.setAttribute("id",xn.indexOf(n)),A.appendChild(l),"false"!==n.status&&"true"===n.status&&(l.checked=!0);let u=document.createElement("span");u.classList.add("slider"),u.classList.add("round"),A.appendChild(u);let p=document.createElement("div");p.classList.add("action--buttons"),e.appendChild(p);let m=document.createElement("div");m.classList.add("output--delete"),p.appendChild(m);let h=document.createElement("button");h.type="button",h.classList.add("delete--button"),h.setAttribute("id",xn.indexOf(n)),m.appendChild(h);let f=document.createElement("div");f.classList.add("output--edit"),p.appendChild(f);let g=document.createElement("button");g.type="button",g.classList.add("edit--button"),g.setAttribute("id",xn.indexOf(n)),f.appendChild(g)}))}function Kn(){const n=document.querySelector(".project--list");n.innerHTML="";const e=document.createElement("p");e.innerText="Projects",e.classList.add("project--list--title"),n.appendChild(e),Bn.forEach((e=>{let t=document.createElement("div");t.classList.add("project--div"),n.appendChild(t);let r=document.createElement("button");r.classList.add("project--list-btn"),r.id=e.name,r.innerText=e.name;let i=document.createElement("button");i.classList.add("project--remove--btn"),i.id=Bn.indexOf(e),t.appendChild(r),t.appendChild(i)}));const t=document.createElement("button");t.type="button",t.classList.add("new--project--button"),t.innerText="Add new project",n.appendChild(t)}function ne(){!1===Tn&&!1===Sn?$n(""):!0===Tn?$n("project",kn,""):!0===Sn&&$n("date","",Mn)}let ee={},te="";!function(){const n=document.createElement("div");n.classList.add("content"),n.setAttribute("id","content"),document.querySelector("body").appendChild(n);const e=document.querySelector("head"),t=document.createElement("link");e.appendChild(t),t.rel="icon",t.href="../src/assets/images/calendar.png",f(),function(){let n=localStorage.getItem("myTasks"),e="";e=null===n?JSON.parse(n):Array.from(JSON.parse(n)),null===n||0===e.length||e.forEach((n=>{!function(n,e,t,r,i,o){let a=yn(n,e,t,r,i,o);xn.push(a),jn()}(n.title,n.description,n.dueDate,n.priority,n.project,n.status)}))}(),function(){let n=localStorage.getItem("myProjects"),e="";e=null===n?JSON.parse(n):Array.from(e=JSON.parse(n)),null===n||0===e.length||e.forEach((n=>{!function(n,e){let t=wn(n,e);Bn.push(t),Ln()}(n.name,n.tasks)}))}(),$n(""),Kn(),function(){const n=document.querySelector(".main--content"),e=document.querySelector(".sideBar");document.querySelector(".main--button").addEventListener("click",qn),n.addEventListener("click",(n=>{n.target.classList.contains("submit--button")&&(function(n,e,t,r,i,o){let a=document.querySelector("#name"),s=document.querySelector("#description"),c=document.querySelector("#due--date"),d=document.querySelector("#priority"),A=document.querySelector("#project"),l=yn(a.value,s.value,c.value,d.value,A.value);xn.push(l),jn()}(),Rn(),ne())})),n.addEventListener("click",(n=>{n.target.classList.contains("cancel--button")&&(Rn(),ne())})),n.addEventListener("click",(n=>{n.target.classList.contains("checkbox")&&(xn[n.target.id].toggleStatus(),ne(),jn())})),n.addEventListener("click",(n=>{n.target.classList.contains("delete--button")&&(xn.splice(n.target.id,1),ne(),jn())})),n.addEventListener("click",(n=>{var e;n.target.classList.contains("edit--button")&&(e=xn[n.target.id],ee=e,function(){const n=document.querySelector(".main--content"),e=document.createElement("form");e.classList.add("edit--task--form"),n.appendChild(e);const t=document.createElement("div");t.classList.add("form--title"),t.innerText="Edit Task",e.appendChild(t),Zn.forEach((n=>{const t=document.createElement("div");e.appendChild(t),t.classList.add(n.description),t.appendChild(n.setLabel()),t.appendChild(n.setInput())}));const r=document.createElement("div");r.classList.add("input--btn--div"),e.appendChild(r),Hn.forEach((n=>{const e=document.createElement("div");r.appendChild(e),e.classList.add(n.description),e.appendChild(n.setLabel()),e.appendChild(n.setInput())}))}(xn[n.target.id]))})),n.addEventListener("click",(n=>{n.target.classList.contains("submit--edit--button")&&(function(n){let e=document.querySelector("#name"),t=document.querySelector("#description"),r=document.querySelector("#due--date"),i=document.querySelector("#priority"),o=document.querySelector("#project");n.setTitle(e.value),n.setDescription(t.value),""===r.value?n.setDueDate(new Date):n.setDueDate(r.value),n.setPriority(i.value),n.setProject(o.value),jn()}(ee),Xn(),ne())})),n.addEventListener("click",(n=>{n.target.classList.contains("cancel--edit--button")&&(Xn(),ne())})),e.addEventListener("click",(n=>{n.target.classList.contains("new--project--button")&&function(){const n=document.querySelector(".project--list"),e=document.createElement("div");e.classList.add("project--input--div"),n.insertBefore(e,n.lastChild);const t=document.createElement("input");t.type="text",t.classList.add("project--input"),t.id="project--id",t.placeholder="My new project",e.appendChild(t);const r=document.createElement("div");r.classList.add("input--btn--div"),e.appendChild(r);const i=document.createElement("button");i.type="button",i.classList.add("project--validate--btn"),i.innerText="✓",r.appendChild(i);const o=document.createElement("button");o.type="button",o.classList.add("project--cancel--btn"),o.innerText="×",r.appendChild(o)}()})),e.addEventListener("click",(n=>{n.target.classList.contains("project--validate--btn")&&(function(n,e){let t=document.querySelector("#project--id"),r=wn(t.value,void 0);""===t.value&&r.setName("New Project"),Bn.push(r),kn=r.name,Ln()}(),On(),Kn(),Nn(),Dn(),ne())})),e.addEventListener("click",(n=>{n.target.classList.contains("project--cancel--btn")&&On()})),e.addEventListener("click",(n=>{var e;n.target.classList.contains("project--list-btn")&&(Nn(),Dn(),e=n.target.id,kn=e,$n("project",kn))})),e.addEventListener("click",(n=>{var e,t;n.target.classList.contains("project--remove--btn")&&(t=Bn[n.target.id].name,te=t,Bn.splice(n.target.id,1),e=te,xn.slice().reverse().forEach((n=>{n.project===e&&xn.splice([xn.indexOf(n)],1)})),jn(),ne(),Kn(),Ln())})),e.addEventListener("click",(n=>{"inbox"===n.target.id&&(zn(),Nn(),$n(""))})),e.addEventListener("click",(n=>{"today"===n.target.id&&(Fn(),zn(),Yn(n.target.id),$n("date","",Mn))})),e.addEventListener("click",(n=>{"this--week"===n.target.id&&(Fn(),zn(),Yn("thisWeek"),$n("date","",Mn))}))}()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,